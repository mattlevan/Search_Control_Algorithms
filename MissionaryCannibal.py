import random

class MissionaryCannibal():
    def __init__(self):
        # Format: [Ms, Cs, boat, river, Ms, Cs].
        self.start = [3,3,'b','r',0,0]

        # Goal states.
        self.goals = [[0,0,'r','b',3,3]]


    '''
    Generates a random start state that is NOT a goal state.

    '''
    def gen_start(self):
        return self.start


    '''
    Getter method that returns the goal states of the eight puzzle game.

    '''
    def get_goals(self):
        return self.goals


    '''
    Finds all possible moves depending on the position of the blank tile.

    '''
    def find_moves(self, start):
        m_l = start[0] # Missionaries on the left side of the river.
        c_l = start[1] # Cannibals on the left side of the river.
        m_r = start[4] # Missionaries on the right side of the river.
        c_r = start[5] # Cannibals on the right side of the river.
        boat = 0 # Position of boat.
        river = 0 # Position of river.

        # Find position of boat and river.
        for i in range(len(start)):
            if start[i] == 'b':
                boat = i
            if start[i] == 'r':
                river = i

        moves_index = [] # Stores the index of each possible move.

        # Define legal moves based on the current state.
        moves = [] # List of legal moves (lists) available from current state.

        if boat == 2: # If the boat is on the left of the river.
            if m_l > 0 and c_l > 0:
                moves.append([m_l-1,c_l-1,'r','b',m_r+1,c_r+1]) # Both move.
            if m_l > 0:
                moves.append([m_l-1,c_l,'r','b',m_r+1,c_r]) # Only M moves.
            if c_l > 0:
                moves.append([m_l,c_l-1,'r','b',m_r,c_r+1]) # Only C moves.
        elif boat == 3: # If the boat is on the right of the river.
            if m_r > 0 and c_r > 0:
                moves.append([m_l+1,c_l+1,'b','r',m_r-1,c_r-1]) # Both move.
            if m_r > 0:
                moves.append([m_l+1,c_l,'b','r',m_r-1,c_r]) # Only M moves.
            if c_r > 0:
                moves.append([m_l,c_l+1,'b','r',m_r,c_r-1]) # Only C moves.

        return moves

    '''
    Generates moves based on the rules of the eight puzzle game.

    '''
    def gen_moves(self, start):
        children = [] # The list of possible moves from the start state.
        moves = self.find_moves(start) # Find the moves and store in a list.

        for i in moves: # Generate all children with 0 tile swap.
            # Append each move state to the children list.
            children.append(i)

        # Return start as a tuple so it may be used as a key in a dict and
        # return the list of children states generated by this method.
        return tuple(start), children


mc = MissionaryCannibal()
print(mc.gen_moves(mc.gen_start()))
