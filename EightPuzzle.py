import Game

class EightPuzzle(Game):
    def __init__(self, start):
        self.goal = [1,2,3,8,0,4,7,6,5]
        if (start == []):
            print('Start is empty.')
            self.start = [0,1,2,3,4,5,6,7,8]
            random.shuffle(self.start)
            print('self.start = ', self.start)
        else:
            self.start = list(start)


    '''
    Finds all possible moves for key 0 in the start
    dictionary and returns moves_index.

    '''
    def find_moves(self, start):
        children = [] # The list of possible moves from the start state.
        zero_index = 0 # Zero index stores index of the blank tile (0) position.
        moves_index = [] # Stores the index of each possible move.

        for i in range(len(start)):
            if start[i] == 0:
                zero_index = i # Find the index of element 0.

        # Find left, right, top, and bottom tiles for swapping if they exist.
        if zero_index % 3 > 0): # Find the left board tile index.
            moves_index.append(zero_index-1)
        elif zero_index % 3 < 2: # Find the right board tile index.
            moves_index.append(zero_index+1)
        elif zero_index > 2: # Find the upper board tile index.
            moves_index.append(zero_index-3)
        elif zero_index < 6: # Find the lower board tile index.
            moves_index.append(zero_index+3)

        return moves_index

    '''
    Generates moves based on the rules of the eight puzzle game.

    '''
    def gen_moves(self, start):
        moves_index = find_moves(start) # Find the moves and store in a list.

        for i in moves_index: # Generate all children with 0 tile swap.
            # Assign the start state to the current move.
            move = start

            # Swap the 0 tile with the ith possible tile.
            move[i], move[zero_index] = move[zero_index], move[i]

            # Append each move state to the children list.
            children.append(move)

        # Return start as a tuple so it may be used as a key in a dict and
        # return the list of children states generated by this method.
        return tuple(start), children

    '''
    Getter method that simply returns the start state of the eight puzzle game.

    '''
    def get_start(self):
        return self.start


    '''
    Getter method that returns the goal state of the eight puzzle game.

    '''
    def get_goal(self):
        return self.goal
